#!/usr/bin/env python

import os, grp
import socket
import imp
mk = imp.load_source('mk', 'build/priv/scripts/mk')

from argparse import ArgumentParser, RawDescriptionHelpFormatter

DESC="""
Configures this package to adapt to many kinds of systems.\n
To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.\n
"""

EPILOGUE="""
The ERL_LIBS environment variable needs to include this (top level) directory
if you're planning to use the generated Makefile(s) to compile/build this
software. Use the supplied `setenv.sh' script in this case.
"""

HOST_HELPSTRING="""
The fully qualified host name of the target (for install) machine.\n
NB: this doesn't have to be the name of the host on which you're
building and/or configuring the sources.
"""

def configure(opts, args):
    output = mk.Writer(opts)
    output.show_stage('CONFIGURE', 'Generating Makefile(s)')
    # TODO: use mk.release_directory(opts) + '*'
    src = os.sep.join([mk.release_directory(opts), '*'])
    targ = os.sep.join([opts.prefix, 'nodewatch'])
    if opts.localdeps:
        lcl = '-l'
    else:
        lcl = ''

    make_vars = dict(map(lambda a: (a, getattr(opts, a)), ['user', 'group']) +
                    [('source', src), ('target', targ), ('local', lcl)])
    mk.template('Makefile.in', 'Makefile', make_vars)

if __name__ == '__main__':
    parser = mk.default_options(description=DESC,
                                epilog=EPILOGUE,
                                usage=mk.USAGE,
                                version='configure v%s' % mk.VSN)
    parser.add_option('--prefix',
                      default='/opt',
                      help='install architecture-independent files in PREFIX')
    parser.add_option('-u', '--with-user',
                      default=os.getlogin(), dest='user', type="string",
                      help='Normalise ownership permissions for USER')
    parser.add_option('-g', '--with-group', dest='group', type="string",
                      default=grp.getgrgid(os.getegid()).gr_name,
                      help='Normalise ownership permissions for GROUP')
    parser.add_option('-n', '--hostname',
                      default=socket.getfqdn(),
                      help=HOST_HELPSTRING)

    configure(*parser.parse_args())
