#!/usr/bin/env escript

%% -----------------------------------------------------------------------------
%%
%% Erlang System Monitoring Tools: configuration script
%%
%% Copyright (c) 2010 Tim Watson (watson.timothy@gmail.com)
%%
%% Permission is hereby granted, free of charge, to any person obtaining a copy
%% of this software and associated documentation files (the "Software"), to deal
%% in the Software without restriction, including without limitation the rights
%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%% copies of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in
%% all copies or substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%% THE SOFTWARE.
%% -----------------------------------------------------------------------------

%%
%% This script generates the release/reltool.config before `rebar generate' runs
%%

-define(NOTICE, "%% THIS FILE WAS GENERATED BY A SCRIPT - DO NOT EDIT").
-define(TEMPLATE_MOD, reltool_config_template).

main(_) ->
    Dest = filename:absname(filename:join(["release", "reltool.config"])),
    Src = Dest ++ ".src",
    erlydtl:compile(Src, ?TEMPLATE_MOD),
    write(Dest, ?TEMPLATE_MOD, [{notice, ?NOTICE},
                                {version, vsn()},
                                {erts_vsn, erlang:system_info(version)},
                                {erl_libs, lib_dirs()},
                                {app_deps, incl_apps()}]),
    ok.

vsn() ->
    Vsn = os:cmd("git describe --abbrev=0"),
    string:strip(Vsn, right, $\n).

lib_dirs() ->
    Paths = reltool_utils:erl_libs(),
    lists:flatten([io_lib:format("\"~s\", ", [P]) || P <- Paths] ++ "\"../\"").

incl_apps() ->
    ConfSet = lists:map(
        fun(F) ->
            {ok, Conf} = file:consult(F),
            proplists:get_value(deps, Conf, [])
        end,
        ["rebar.config"|filelib:wildcard("*/rebar.config")]),
    Incl = [{app, element(1, D), [{incl_cond, include}]}
                || D <- lists:flatten(ConfSet)],
    string:join([io_lib:format("~p~n", [Inc]) || Inc <- Incl], ", ").

write(Dest, Mod, Vars) ->
    {ok, Res} = Mod:render(Vars),
    case file:write_file(filename:absname(Dest), list_to_binary(Res)) of
        ok -> ok;
        {error, WriteError} ->
            io:format("Failed to write ~p: ~p\n", [Dest, WriteError]),
            halt(1)
    end.
